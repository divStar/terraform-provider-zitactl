# Terraform Provider CI/CD Workflow
name: CI

on:
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
      - 'website/**'
  push:
    branches:
      - master
      - main
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
      - 'website/**'

permissions:
  contents: read

jobs:
  # Lint
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest

      - name: Run make lint
        run: make lint

  # Build
  build:
    name: Build
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Run make build
        run: make build

  # Verify documentation and/or license headers are up to date
  generate:
    name: Generate
    needs: [ test, test-acceptance ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          terraform_wrapper: false

      - name: Run make generate
        run: make generate

      - name: Verify documentation and/or license headers are up to date
        run: |
          if ! git diff --compact-summary --exit-code; then
            echo "❌ Error: documentation and/or license headers are not up to date"
            echo ""
            echo "The following files have uncommitted changes after running 'make generate':"
            git diff --compact-summary
            echo ""
            echo "To fix this, run `make generate`, review the changes, add, commit and push them."
            exit 1
          fi
          echo "✅ All generated files are up to date"

  # Detect changes in source code
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      internal: ${{ steps.filter.outputs.internal }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            internal:
              - 'internal/**'

  # Unit tests
  test:
    if: needs.changes.outputs.internal == 'true'
    name: Unit Tests
    needs: [changes, build]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Run make test
        run: make test

  # Acceptance tests for Terraform and OpenTofu (using '../tools/docker-compose.yml')
  test-acceptance:
    if: needs.changes.outputs.internal == 'true'
    name: Acceptance Tests (${{ matrix.tool }})
    needs: [changes, build]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        tool: [ terraform, opentofu ]
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Setup Terraform
        if: matrix.tool == 'terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          terraform_wrapper: false

      - name: Setup OpenTofu
        if: matrix.tool == 'opentofu'
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: latest
          tofu_wrapper: false

      - name: Prepare Zitadel 'serviceaccount' directory
        run: |
          mkdir -p ${PWD}/tools/serviceaccount
          chmod 777 ${PWD}/tools/serviceaccount

      - name: Start Zitadel
        run: make zitadel-up

      - name: Run make testacc
        env:
          TF_ACC: "1"
        run: make testacc
        continue-on-error: true

      - name: Stop Zitadel
        if: always()
        run: make zitadel-down
